* Type Abstraction Using a Signature
** DONE Encapsulate the type and values given in the template into a module
CLOSED: [2015-12-10 Thu 13:52]
Module is to be named 'Exp'.

To make 'e' abstract, we can assign a signature to the module 'Exp' that
makes the type 'e' abstract and publish the functions 'int', 'mul', and
'add'.

Given that interface, the only way to build a value of type 'e' is to use
the aformentioned functions and 'to_string'. These are called "smart
constructors" because they perform computation when building values.

These smart constructors enforce the invariant that an expression, as
represented by a value of type 'e', is always simplified, i.e. that it
does not contain any further subexpressions that are additive or multiplicative
identities.

** Accept expressions like
Exp.mul (Exp.int 0) (Exp.add (Exp.int 1) (Exp.int 2))
** Reject expressions like
Exp.EMul (Exp.EInt 0) (Exp.EAdd (Exp.EInt 1) (Exp.Eint 2))

** Turning 'e' into an abstract type has consequences
By doing so, we prevent the user from pattern matching over values of
type 'e'. To allow pattern matching while forbidding direct application
of data constructors, we could use 'private types' (this is an advanced
feature).
