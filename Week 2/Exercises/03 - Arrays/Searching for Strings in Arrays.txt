SEARCHING FOR STRINGS IN ARRAYS

DONE

1) Write a function is_sorted : string array -> bool which checks if the values of the input array are sorted in strictly increasing order, implying that its elements are unique (use String.compare).

Array.to_list on string array yields a string list.
With this list, we can recursively compare the head of the list with the
head of the tail of the list, if this condition is true, we recur on is_sorted.
If the head of the tail is the empty list, then we terminate on the condition true.
Otherwise, false.


2) Using the binary search algorithm, an element can be found very quickly in a sorted array. 
Write a function find : string array -> string -> int such that find arr word is the index of the word in the sorted array arr if it occurs in arr or -1 if word does not occur in arr. 

The number or array accesses will be counted, to check that you obtain the expected algorithmic complexity. Beware that you really perform the minimal number of accesses. For instance, if your function has to test the contents of a cell twice, be sure to put the result of the access in a variable, and then perform the tests on that variable.

;; Boilerplates
let is_sorted a =
  "Replace this string with your implementation." ;;

let find dict word =
  "Replace this string with your implementation." ;;

Computing find [|"a"; "b"; "c"|] "c"
0 pt Wrong value 1

Computing find [|"e"; "f"; "g"; "h"|] "i"
0 pt Wrong exception Invalid_argument(Array.sub)
